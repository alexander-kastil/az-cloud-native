env=dev
loc=westeurope
grp=az-native-$env
acr=aznativecontainers$env
acaenv=acaenv-az-native-$env
storageAcct=aznative$env
container=invoices
queue=food-orders
img=invoices-job:v1
app=invoices-job

az group create -n $grp -l $loc

# azure container app environment
az containerapp env create -n $acaenv -g $grp --location $loc --no-wait

# create storage queue
az storage account create -n $storageAcct -g $grp --kind StorageV2 --sku Standard_LRS
key=$(az storage account keys list -n $storageAcct --query "[0].value")
az storage container create --account-name $storageAcct --account-key $key --name $container
az storage queue create -n $queue --account-key $key --account-name $storageAcct
conStr=$(az storage account show-connection-string -n $storageAcct -g $grp \
  --query connectionString -o tsv)

# put a base64 encoded message in the queue -> base 64 encoding is required for the message to be consumed in an Azure Function
messageOne=$(echo "Hello Queue Reader App" | base64)
az storage message put --content $messageOne --queue-name $queue \
 --connection-string $conStr

# create a local function app container 
cd food-invoices
docker build --rm -f dockerfile -t $img .

# start container locally and show how it fetches the message
docker run -d --rm -p 5052:80 -e "InvoiceConnectionString=$conStr" -e "Sleep=500" $img

# Add another message to the queue and see the logs again
messageTwo=$(echo "Another Hello to Queue Reader App" | base64) 
az storage message put --content $messageTwo --queue-name $queue \
  --connection-string $conStr

## Check if an invoice has been created in the blob container
az storage blob list --container-name $container --connection-string $conStr --output table 

## Stop the local container

## Build the container using ACR & get the password for the ACR
az acr build -r $acr -t $img .
pwd=$(az acr credential show -n $acr --query passwords[0].value -o tsv)
loginSrv=$(az acr list --query "[?name=='$acr'].loginServer" -o tsv)   

# Add a third message to the queue 
messageThree=$(echo "Third Hello to Queue Reader App" | base64)
az storage message put --content $messageThree --queue-name $queue \
  --connection-string $conStr      

# Create the job
az containerapp job create -n $app -g $grp --environment $acaenv \
--registry-server $acr.azurecr.io \
--registry-username $acr \
--registry-password $pwd \
--image $acr.azurecr.io/$img \
--trigger-type "Schedule" \
--cron-expression "*/5 * * * *" \
--replica-timeout 1800 --replica-retry-limit 0 --replica-completion-count 5 --parallelism 1 \
--secrets "storagecon=$conStr" \
--env-vars Sleep=100 InvoiceConnectionString=secretref:storagecon

# Check the queue for the third message. It should be gone
# Run the order-creator to create a bunch of orders
# Check the queue again. It should have a bunch of messages in it
